Index: unnamed.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unnamed.patch b/unnamed.patch
new file mode 100644
--- /dev/null	(date 1728742859978)
+++ b/unnamed.patch	(date 1728742859978)
@@ -0,0 +1,486 @@
+Index: Programming&Algorithms/Block1/Introduction/j = 10.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/j = 10.py b/Programming&Algorithms/Block1/Introduction/j = 10.py
+new file mode 100644
+--- /dev/null	(date 1727985473611)
++++ b/Programming&Algorithms/Block1/Introduction/j = 10.py	(date 1727985473611)
+@@ -0,0 +1,8 @@
++j = 10
++j = j / 4
++print(j)
++
++# j = 10: You assign the value 10 to the variable j.
++# j = j / 4: You divide the current value of j (which is 10) by 4. So, j becomes 10 / 4 = 2.5. This result is a floating-point number (decimal), not an integer.
++# print(j): This prints the updated value of j, which is 2.5.
++# result float coz 2 number divide / using / operator
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/Print5.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/Print5.py b/Programming&Algorithms/Block1/Introduction/Print5.py
+new file mode 100644
+--- /dev/null	(date 1727982577560)
++++ b/Programming&Algorithms/Block1/Introduction/Print5.py	(date 1727982577560)
+@@ -0,0 +1,5 @@
++v = 1
++v = v + 5
++print (v)
++
++# the output value is v after adding 5 to it and the result is 6
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/Print6.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/Print6.py b/Programming&Algorithms/Block1/Introduction/Print6.py
+new file mode 100644
+--- /dev/null	(date 1727982990153)
++++ b/Programming&Algorithms/Block1/Introduction/Print6.py	(date 1727982990153)
+@@ -0,0 +1,3 @@
++m = 6    # variable m set to 6
++m = m * 3   # then muiltiply the current value of 6 by 3, and m becomes 6*3 = 18
++print (m)  # when print the output 18
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/PrintN.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/PrintN.py b/Programming&Algorithms/Block1/Introduction/PrintN.py
+new file mode 100644
+--- /dev/null	(date 1727984869073)
++++ b/Programming&Algorithms/Block1/Introduction/PrintN.py	(date 1727984869073)
+@@ -0,0 +1,7 @@
++n = 4
++n = n * 5
++print (n)
++
++#1.  assign the variable 4 to variable n
++#2.  n = n * 5 you update the value of n by multiply the current value 4 by 5, which becaome 20
++# print n, it print the update value of n which is 20
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/PrintW.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/PrintW.py b/Programming&Algorithms/Block1/Introduction/PrintW.py
+new file mode 100644
+--- /dev/null	(date 1727984564140)
++++ b/Programming&Algorithms/Block1/Introduction/PrintW.py	(date 1727984564140)
+@@ -0,0 +1,7 @@
++w = 3
++w = w + 9
++print (w)
++
++# 1. assign the value 3 to the variable w
++# 2. w=w+9 the value of v was updated by adding 9, so w becomes 3+9=12
++#  print w updated to 12
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/PrintY.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/PrintY.py b/Programming&Algorithms/Block1/Introduction/PrintY.py
+new file mode 100644
+--- /dev/null	(date 1727983273476)
++++ b/Programming&Algorithms/Block1/Introduction/PrintY.py	(date 1727983273476)
+@@ -0,0 +1,5 @@
++from tkinter import Y
++
++x = 5   # assign of 5 to variable x
++x = x - 3  # subtract 3 from x, so x become 5-3=3
++print (Y)  # print value of x is now 2
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/print(i).py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/print(i).py b/Programming&Algorithms/Block1/Introduction/print(i).py
+new file mode 100644
+--- /dev/null	(date 1727983729373)
++++ b/Programming&Algorithms/Block1/Introduction/print(i).py	(date 1727983729373)
+@@ -0,0 +1,3 @@
++i = 15 # assign variable 15 to i
++i = 1 / 3  # value of i overwritten with result of dividing 1 by 3, something like 0.3333.
++print(i) # value of i is 0.3333333333333333
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/IntDivision.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/IntDivision.py b/Programming&Algorithms/Block1/Introduction/IntDivision.py
+new file mode 100644
+--- /dev/null	(date 1728238870104)
++++ b/Programming&Algorithms/Block1/Introduction/IntDivision.py	(date 1728238870104)
+@@ -0,0 +1,27 @@
++m = 5
++m = m // 2
++print(m)
++
++# m = 5: This assigns the value 5 to the variable m. So, m is holding the number 5.
++# m = m // 2: This line uses the // operator, which means floor division. This divides m by 2 and rounds down the result to the nearest whole number.
++# When we divide 5 by 2, the result is 2.5.
++# But since // is floor division, we drop the decimal part (the .5), leaving us with just 2.
++# print(m): This prints the current value of m, which is now 2
++
++
++y = 3
++y = 2 ** y
++print(y)
++
++#1. y = 2 --> y hold 3 and we assign variable 3 to the variable y
++# y = 2 ** y --> If I have 2 and muiltiply it by itself 3 times
++#  First: Multiplying (like 2 * 3) means you add 2 three times: 2 + 2 + 2 = 6.
++# Raising to a power (2 ** 3) means you multiply 2 by itself three times:
++# First: 2 * 2 = 4
++# Second: 4 * 2 = 8
++
++n = 5.5
++n = n // 2
++print(n)
++
++# output 2.00
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/printValueY.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/printValueY.py b/Programming&Algorithms/Block1/Introduction/printValueY.py
+new file mode 100644
+--- /dev/null	(date 1727985242204)
++++ b/Programming&Algorithms/Block1/Introduction/printValueY.py	(date 1727985242204)
+@@ -0,0 +1,7 @@
++y = 10
++y = y -11
++print (y)
++
++# 1. y = 10: assign the value 10 to the variable y.
++# 2. y = y - 11: then subtract 11 from the current value of y. So, y becomes 10 - 11 = -1.
++# 3. print(y): prints the updated value of y, which is -1.
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/NumericDataType2.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/NumericDataType2.py b/Programming&Algorithms/Block1/Introduction/NumericDataType2.py
+new file mode 100644
+--- /dev/null	(date 1728076994034)
++++ b/Programming&Algorithms/Block1/Introduction/NumericDataType2.py	(date 1728076994034)
+@@ -0,0 +1,3 @@
++n = 3
++for i in range(1,n+1):
++    print("Hello World!")
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/StatementsPrint5x.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/StatementsPrint5x.py b/Programming&Algorithms/Block1/Introduction/StatementsPrint5x.py
+new file mode 100644
+--- /dev/null	(date 1727624671914)
++++ b/Programming&Algorithms/Block1/Introduction/StatementsPrint5x.py	(date 1727624671914)
+@@ -0,0 +1,3 @@
++n = 5
++for i in range(1,n+1):
++    print("5")
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/Indetation.Correction.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/Indetation.Correction.py b/Programming&Algorithms/Block1/Introduction/Indetation.Correction.py
+new file mode 100644
+--- /dev/null	(date 1727625533619)
++++ b/Programming&Algorithms/Block1/Introduction/Indetation.Correction.py	(date 1727625533619)
+@@ -0,0 +1,7 @@
++n=3
++for i in range(1,n+1): #PRogram code
++    print("Hello World!") # Program Code
++    print("Welcome to Pythorn")
++    print("Learn Pythorn is fun")
++
++    # Output
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/IntroductionToPycharm.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/IntroductionToPycharm.py b/Programming&Algorithms/Block1/Introduction/IntroductionToPycharm.py
+new file mode 100644
+--- /dev/null	(date 1727624515559)
++++ b/Programming&Algorithms/Block1/Introduction/IntroductionToPycharm.py	(date 1727624515559)
+@@ -0,0 +1,5 @@
++n = 3
++for i in range(1,n+1):
++    print("Hello World!")
++
++    
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/NumericOperatorShowIntORFloat.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/NumericOperatorShowIntORFloat.py b/Programming&Algorithms/Block1/Introduction/NumericOperatorShowIntORFloat.py
+new file mode 100644
+--- /dev/null	(date 1728077886958)
++++ b/Programming&Algorithms/Block1/Introduction/NumericOperatorShowIntORFloat.py	(date 1728077886958)
+@@ -0,0 +1,14 @@
++# x = 7
++# for i in range(7): # iterate 7x
++#    print("2")
++
++
++# x = 7
++# y = 2
++# result = x ** y  # 7 **  to get 49
++
++x = 7
++y = 2
++result = x % y # 7%2
++
++# doing division 7/2=3 with one as reminder
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py b/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py
+new file mode 100644
+--- /dev/null	(date 1728596148956)
++++ b/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py	(date 1728596148956)
+@@ -0,0 +1,77 @@
++x = 1
++x += 1
++print(x)
++
++#Python to take the current value of x (which is 1), add 1 to it, and then store that new value back in x.
++#After this line, x now holds the value 2 because 1 + 1 = 2.
++#print(x):
++
++#This command tells the computer to display the current value of x.
++#Since x now holds the value 2 after the addition, it prints 2.
++
++y = 5
++y -=7
++print(y)
++
++# Assign the value 5 into current value y, which is 5
++#y -= 7:
++#The -= operator is a shorthand way of saying "subtract from the current value of y
++#urrent value of y (which is 5) and subtract 7 from it.
++#Now, y becomes 5 - 7, which equals -2. So, y now holds the value -2.
++
++z = 4
++z *= 3
++print(z)
++
++#The = sign here doesn’t mean "equal" like it does in math. In programming, = means assign. So, this line means we are giving or assigning the value 4 to a box called z.
++#Imagine you have a box labeled z, and you put the number 4 inside the box.
++#Example to Make it Easier:
++#Imagine you have 4 apples (z = 4), and someone says, "Now triple the apples." You would now have 4 + 4 + 4 = 12 apples. That’s what this code does!
++
++#Full Walkthrough:
++#You start with z = 4 (putting the number 4 into the box called z).
++#The z *= 3 tells the computer to multiply the value in z by 3. Multiplying is like repeating the number multiple times, so 4 becomes 12.
++#print(z) shows the number 12, because that's the new value inside the box z.
++
++w = 27
++w/= 10
++print("W")
++# assigns the value 27 to the variable w
++#augmented assignment operator, specifically for division. ake the value inside w (which is 27), divide it by 10, and store the result back in w
++#So, dividing 27 by 10 gives you 2.7. Now, w contains 2.7
++
++
++# below statement combining augmented assignment numeric operator
++
++m = 1.0
++m += 3 - 2
++print("m")
++#  assigns the value 1.0 to the variable m.
++#First, the expression 3 - 2 is calculated. When you subtract 2 from 3, the result is 1.
++#So, the line becomes m = m + 1.
++#Since m started with the value 1.0, you now add 1 to it, which makes the new value of m equal to 2.0
++#The value of m was originally 1.0. After the operation m += 3 - 2, the value of m becomes 2.0.
++#However, the output will only show the letter "m", not the value. So, the final output of this code will be:
++
++
++n = 5#
++n += 2 * 2
++print("n")
++#variable n holding the data type 5, is assigned the value 5 to variable and n became 5
++#The value of n was originally 5. After the operation n += 2 * 2, the value of n becomes 9.
++# output will only show the letter "n", not the value. So, the final output of this code will be:
++
++u = 3
++u *=2 + 2
++print(u)
++# assign variable 3 to  variable n, so n become 3
++#u *=2 + 2 this is like a math problem. First, we look at the part 2 + 2.
++#What’s 2 plus 2? It’s 4!
++# Now, we have u *= 4. This is just a shortcut for saying: 3 multiplied by 4? It’s 12!
++#u is 12 --->print(u), it tells the computer, "Show me what’s inside the box u."
++#And the computer shows the number 12
++
++
++v = 27
++v/= 5 + 5
++print("V")
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/BlankLinesSeparateCodeSegments.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/BlankLinesSeparateCodeSegments.py b/Programming&Algorithms/Block1/Introduction/BlankLinesSeparateCodeSegments.py
+new file mode 100644
+--- /dev/null	(date 1727624897112)
++++ b/Programming&Algorithms/Block1/Introduction/BlankLinesSeparateCodeSegments.py	(date 1727624897112)
+@@ -0,0 +1,6 @@
++n=1
++for i in range(1,n+1):
++    print(1)
++    print("2")
++
++    # show the two aways to print use "" or not "" required
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/NumericDataType2Exponentiation.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/NumericDataType2Exponentiation.py b/Programming&Algorithms/Block1/Introduction/NumericDataType2Exponentiation.py
+new file mode 100644
+--- /dev/null	(date 1728161509023)
++++ b/Programming&Algorithms/Block1/Introduction/NumericDataType2Exponentiation.py	(date 1728161509023)
+@@ -0,0 +1,10 @@
++y = 3
++y = 2 ** y
++print(y)
++
++#1. y = 2 --> y hold 3 and we assign variable 3 to the variable y
++# y = 2 ** y --> If I have 2 and muiltiply it by itself 3 times
++#  First: Multiplying (like 2 * 3) means you add 2 three times: 2 + 2 + 2 = 6.
++# Raising to a power (2 ** 3) means you multiply 2 by itself three times:
++# First: 2 * 2 = 4
++# Second: 4 * 2 = 8
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/Introduction/PracticeStatementToPRint1,2&HelloWorld.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/Introduction/PracticeStatementToPRint1,2&HelloWorld.py b/Programming&Algorithms/Block1/Introduction/PracticeStatementToPRint1,2&HelloWorld.py
+new file mode 100644
+--- /dev/null	(date 1727625872507)
++++ b/Programming&Algorithms/Block1/Introduction/PracticeStatementToPRint1,2&HelloWorld.py	(date 1727625872507)
+@@ -0,0 +1,5 @@
++n=1
++for i in range(1,n+1):
++    print("1")
++    print("2.0")
++    print("Hello World!")
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/NumericDataType2Operator.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/Programming&Algorithms/Block1/NumericDataType2Operator.py b/Programming&Algorithms/Block1/NumericDataType2Operator.py
+new file mode 100644
+--- /dev/null	(date 1728079035731)
++++ b/Programming&Algorithms/Block1/NumericDataType2Operator.py	(date 1728079035731)
+@@ -0,0 +1,7 @@
++x=2
++x=2**x
++print(x)
++
++#  1. x variable assign the value 2 then
++#  2. the expression 2**x raise power of 2, since x is current 2
++# this calculate 2**" equal 4
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/IntroductionToPycharm/StatementsPrint5x.py
+===================================================================
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/StatementsPrint5x.py b/Programming&Algorithms/Block1/IntroductionToPycharm/StatementsPrint5x.py
+deleted file mode 100644
+--- a/Programming&Algorithms/Block1/IntroductionToPycharm/StatementsPrint5x.py	
++++ /dev/null	
+@@ -1,3 +0,0 @@
+-n = 5
+-for i in range(1,n+1):
+-    print("5")
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/IntroductionToPycharm/Indetation.Correction.py
+===================================================================
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/Indetation.Correction.py b/Programming&Algorithms/Block1/IntroductionToPycharm/Indetation.Correction.py
+deleted file mode 100644
+--- a/Programming&Algorithms/Block1/IntroductionToPycharm/Indetation.Correction.py	
++++ /dev/null	
+@@ -1,7 +0,0 @@
+-n=3
+-for i in range(1,n+1): #PRogram code
+-    print("Hello World!") # Program Code
+-    print("Welcome to Pythorn")
+-    print("Learn Pythorn is fun")
+-
+-    # Output
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/IntroductionToPycharm/IntroductionToPycharm.py
+===================================================================
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/IntroductionToPycharm.py b/Programming&Algorithms/Block1/IntroductionToPycharm/IntroductionToPycharm.py
+deleted file mode 100644
+--- a/Programming&Algorithms/Block1/IntroductionToPycharm/IntroductionToPycharm.py	
++++ /dev/null	
+@@ -1,5 +0,0 @@
+-n = 3
+-for i in range(1,n+1):
+-    print("Hello World!")
+-
+-    
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/IntroductionToPycharm/BlankLinesSeparateCodeSegments.py
+===================================================================
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/BlankLinesSeparateCodeSegments.py b/Programming&Algorithms/Block1/IntroductionToPycharm/BlankLinesSeparateCodeSegments.py
+deleted file mode 100644
+--- a/Programming&Algorithms/Block1/IntroductionToPycharm/BlankLinesSeparateCodeSegments.py	
++++ /dev/null	
+@@ -1,6 +0,0 @@
+-n=1
+-for i in range(1,n+1):
+-    print(1)
+-    print("2")
+-
+-    # show the two aways to print use "" or not "" required
+\ No newline at end of file
+Index: Programming&Algorithms/Block1/IntroductionToPycharm/PracticeStatementToPRint1,2&HelloWorld.py
+===================================================================
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/PracticeStatementToPRint1,2&HelloWorld.py b/Programming&Algorithms/Block1/IntroductionToPycharm/PracticeStatementToPRint1,2&HelloWorld.py
+deleted file mode 100644
+--- a/Programming&Algorithms/Block1/IntroductionToPycharm/PracticeStatementToPRint1,2&HelloWorld.py	
++++ /dev/null	
+@@ -1,5 +0,0 @@
+-n=1
+-for i in range(1,n+1):
+-    print("1")
+-    print("2.0")
+-    print("Hello World!")
+\ No newline at end of file
+diff --git a/Programming&Algorithms/Block1/IntroductionToPycharm/Print5.py b/Programming&Algorithms/Block1/IntroductionToPycharm/Print5.py
+deleted file mode 100644
Index: Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py b/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py
--- a/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py	
+++ b/Programming&Algorithms/Block1/Introduction/Augumented Assignment Operator.py	(date 1728596148956)
@@ -68,7 +68,8 @@
 #u *=2 + 2 this is like a math problem. First, we look at the part 2 + 2.
 #What’s 2 plus 2? It’s 4!
 # Now, we have u *= 4. This is just a shortcut for saying: 3 multiplied by 4? It’s 12!
-#u is 12 --->
+#u is 12 --->print(u), it tells the computer, "Show me what’s inside the box u."
+#And the computer shows the number 12
 
 
 v = 27
